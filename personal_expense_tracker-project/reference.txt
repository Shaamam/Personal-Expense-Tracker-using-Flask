to create environment---
python -m venv .venv  

to activate environment---
.venv\scripts\activate  

to upgrade pip----------
python.exe -m pip install --upgrade pip

to install libraries---
pip install -r requirements.txt --no-cache-dir

to run flask in windows----
python app.py

to freeze requirements----
pip freeze > requirements.txt

to build image--------
docker build -t test .
docker build -t vgsece/personal_expense_tracker:latest .

to containerize image-----------------
docker run -p 8080:8080 -d test
docker run -p 8080:8080 -d vgsece/personal_expense_tracker:latest



----------------------------------------------------------------------------------------------------

FROM python:3.9-slim as compiler
ENV PYTHONUNBUFFERED 1

WORKDIR /app/

RUN python -m venv /opt/venv
# Enable venv
ENV PATH="/opt/venv/bin:$PATH"

COPY ./requirements.txt /app/requirements.txt
RUN pip install -Ur requirements.txt --no-cache-dir

FROM python:3.9-slim as runner
WORKDIR /app/
COPY --from=compiler /opt/venv /opt/venv

# Enable venv
ENV PATH="/opt/venv/bin:$PATH"
COPY . /app/
CMD ["python", "app.py", ]

----------------------------------------------------------------------------------------------------

FROM python:3.7-slim AS compile-image
RUN apt-get update
RUN apt-get install -y --no-install-recommends build-essential gcc

RUN python -m venv /opt/venv
# Make sure we use the virtualenv:
ENV PATH="/opt/venv/bin:$PATH"

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY setup.py .
COPY myapp/ .
RUN pip install .

FROM python:3.7-slim AS build-image
COPY --from=compile-image /opt/venv /opt/venv

# Make sure we use the virtualenv:
ENV PATH="/opt/venv/bin:$PATH"
CMD ['myapp']